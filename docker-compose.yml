# containers:
#  - backend (stateless, Python)
#  - frontend (stateless, Node.js)
#  - database (stateful/persistent storage, redis)
#  - test_host (stateless)

version: '3.8'

services:
  backend:
    build: ./app/backend
    ports:
      - "5000:5000"
    depends_on:
      - redis
    env_file:
      - test.env
    volumes:
      - ./test_idrsa_key:/root/.ssh/id_rsa  # Bind mount the SSH key
      - ./test_idrsa_key.pub:/root/.ssh/id_rsa.pub  # Bind mount the SSH key

  frontend:
    build: ./app/frontend
    ports:
      - "80:80"
    env_file:
      - test.env

  redis:
    build: ./app/redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    env_file:
      - test.env

  test_host:
    # build: ./app/test_host
    build:
      context: ./app/test_host
      args:
        PUBLIC_KEY: ${PUBLIC_KEY}  # Pass the public key as a build argument
    depends_on:
      - backend
      # - frontend
    env_file:
      - test.env

  prometheus:
    image: prom/prometheus
    volumes:
      - ./app/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./app/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  coredns:
    build: ./app/coredns/coredns-service
    ports:
      - 53:53
    volumes:
      # shared /etc/hosts file
      - shared-etc:/etc/coredns

  coredns-api:
    build: ./app/coredns/dns-mgmt-service
    ports:
      - 5001:5001
    volumes:
      # shared /etc/hosts file
      - shared-etc:/etc/coredns

volumes:
  redis-data:
  grafana-storage:
  shared-etc:
